//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "FK_PurchasedCar_Engine", "Engine", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Service.Engine), "PurchasedCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Service.PurchasedCar), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_PurchasedCar_Tire", "Tire", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Service.TirePackage), "PurchasedCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Service.PurchasedCar), true)]

#endregion

namespace Service
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Engine> Engines
        {
            get
            {
                if ((_Engines == null))
                {
                    _Engines = base.CreateObjectSet<Engine>("Engines");
                }
                return _Engines;
            }
        }
        private ObjectSet<Engine> _Engines;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PurchasedCar> PurchasedCars
        {
            get
            {
                if ((_PurchasedCars == null))
                {
                    _PurchasedCars = base.CreateObjectSet<PurchasedCar>("PurchasedCars");
                }
                return _PurchasedCars;
            }
        }
        private ObjectSet<PurchasedCar> _PurchasedCars;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TirePackage> TirePackages
        {
            get
            {
                if ((_TirePackages == null))
                {
                    _TirePackages = base.CreateObjectSet<TirePackage>("TirePackages");
                }
                return _TirePackages;
            }
        }
        private ObjectSet<TirePackage> _TirePackages;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Engines EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEngines(Engine engine)
        {
            base.AddObject("Engines", engine);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PurchasedCars EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPurchasedCars(PurchasedCar purchasedCar)
        {
            base.AddObject("PurchasedCars", purchasedCar);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TirePackages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTirePackages(TirePackage tirePackage)
        {
            base.AddObject("TirePackages", tirePackage);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Engine")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Engine : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Engine object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="horsepower">Initial value of the Horsepower property.</param>
        /// <param name="cylinders">Initial value of the Cylinders property.</param>
        public static Engine CreateEngine(global::System.Int32 id, global::System.Int32 horsepower, global::System.Int32 cylinders)
        {
            Engine engine = new Engine();
            engine.Id = id;
            engine.Horsepower = horsepower;
            engine.Cylinders = cylinders;
            return engine;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Horsepower
        {
            get
            {
                return _Horsepower;
            }
            set
            {
                OnHorsepowerChanging(value);
                ReportPropertyChanging("Horsepower");
                _Horsepower = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Horsepower");
                OnHorsepowerChanged();
            }
        }
        private global::System.Int32 _Horsepower;
        partial void OnHorsepowerChanging(global::System.Int32 value);
        partial void OnHorsepowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Cylinders
        {
            get
            {
                return _Cylinders;
            }
            set
            {
                OnCylindersChanging(value);
                ReportPropertyChanging("Cylinders");
                _Cylinders = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cylinders");
                OnCylindersChanged();
            }
        }
        private global::System.Int32 _Cylinders;
        partial void OnCylindersChanging(global::System.Int32 value);
        partial void OnCylindersChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_PurchasedCar_Engine", "PurchasedCar")]
        public EntityCollection<PurchasedCar> PurchasedCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PurchasedCar>("Model.FK_PurchasedCar_Engine", "PurchasedCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PurchasedCar>("Model.FK_PurchasedCar_Engine", "PurchasedCar", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="PurchasedCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PurchasedCar : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PurchasedCar object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="engineId">Initial value of the EngineId property.</param>
        /// <param name="tireId">Initial value of the TireId property.</param>
        public static PurchasedCar CreatePurchasedCar(global::System.Int32 id, global::System.Int32 engineId, global::System.Int32 tireId)
        {
            PurchasedCar purchasedCar = new PurchasedCar();
            purchasedCar.Id = id;
            purchasedCar.EngineId = engineId;
            purchasedCar.TireId = tireId;
            return purchasedCar;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CustomerName
        {
            get
            {
                return _CustomerName;
            }
            set
            {
                OnCustomerNameChanging(value);
                ReportPropertyChanging("CustomerName");
                _CustomerName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CustomerName");
                OnCustomerNameChanged();
            }
        }
        private global::System.String _CustomerName;
        partial void OnCustomerNameChanging(global::System.String value);
        partial void OnCustomerNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EngineId
        {
            get
            {
                return _EngineId;
            }
            set
            {
                OnEngineIdChanging(value);
                ReportPropertyChanging("EngineId");
                _EngineId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EngineId");
                OnEngineIdChanged();
            }
        }
        private global::System.Int32 _EngineId;
        partial void OnEngineIdChanging(global::System.Int32 value);
        partial void OnEngineIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TireId
        {
            get
            {
                return _TireId;
            }
            set
            {
                OnTireIdChanging(value);
                ReportPropertyChanging("TireId");
                _TireId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TireId");
                OnTireIdChanged();
            }
        }
        private global::System.Int32 _TireId;
        partial void OnTireIdChanging(global::System.Int32 value);
        partial void OnTireIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_PurchasedCar_Engine", "Engine")]
        public Engine Engine
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engine>("Model.FK_PurchasedCar_Engine", "Engine").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engine>("Model.FK_PurchasedCar_Engine", "Engine").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Engine> EngineReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Engine>("Model.FK_PurchasedCar_Engine", "Engine");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Engine>("Model.FK_PurchasedCar_Engine", "Engine", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_PurchasedCar_Tire", "Tire")]
        public TirePackage Tires
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TirePackage>("Model.FK_PurchasedCar_Tire", "Tire").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TirePackage>("Model.FK_PurchasedCar_Tire", "Tire").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TirePackage> TiresReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TirePackage>("Model.FK_PurchasedCar_Tire", "Tire");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TirePackage>("Model.FK_PurchasedCar_Tire", "Tire", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="TirePackage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TirePackage : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TirePackage object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="weight">Initial value of the Weight property.</param>
        public static TirePackage CreateTirePackage(global::System.Int32 id, global::System.Int32 size, global::System.Int32 weight)
        {
            TirePackage tirePackage = new TirePackage();
            tirePackage.Id = id;
            tirePackage.Size = size;
            tirePackage.Weight = weight;
            return tirePackage;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int32 _Size;
        partial void OnSizeChanging(global::System.Int32 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Weight
        {
            get
            {
                return _Weight;
            }
            set
            {
                OnWeightChanging(value);
                ReportPropertyChanging("Weight");
                _Weight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Weight");
                OnWeightChanged();
            }
        }
        private global::System.Int32 _Weight;
        partial void OnWeightChanging(global::System.Int32 value);
        partial void OnWeightChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_PurchasedCar_Tire", "PurchasedCar")]
        public EntityCollection<PurchasedCar> PurchasedCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PurchasedCar>("Model.FK_PurchasedCar_Tire", "PurchasedCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PurchasedCar>("Model.FK_PurchasedCar_Tire", "PurchasedCar", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
